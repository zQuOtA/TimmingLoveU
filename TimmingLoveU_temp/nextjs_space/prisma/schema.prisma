generator client {
    provider = "prisma-client-js"
    binaryTargets = ["native", "linux-musl-arm64-openssl-3.0.x"]
    output = "/home/ubuntu/timming_loveu/nextjs_space/node_modules/.prisma/client"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

// NextAuth models
model Account {
  id                String  @id @default(cuid())
  userId            String  @map("user_id")
  type              String
  provider          String
  providerAccountId String  @map("provider_account_id")
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model User {
  id                  String    @id @default(cuid())
  name                String?
  email               String    @unique
  emailVerified       DateTime? @map("email_verified")
  image               String?
  password            String?
  firstName           String?   @map("first_name")
  lastName            String?   @map("last_name")
  planoAtivo          Boolean   @default(false) @map("plano_ativo")
  dataExpiracaoPlano  DateTime? @map("data_expiracao_plano")
  isAdmin             Boolean   @default(false) @map("is_admin")
  createdAt           DateTime  @default(now()) @map("created_at")
  updatedAt           DateTime  @updatedAt @map("updated_at")

  accounts    Account[]
  sessions    Session[]
  couplePages CouplePage[]

  @@map("users")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verificationtokens")
}

// Timming LoveU specific models
model CouplePage {
  id                String    @id @default(cuid())
  userId            String    @map("user_id")
  nomeCasal         String    @map("nome_casal")
  mensagem          String?
  dataInicioRelacao DateTime  @map("data_inicio_relacao")
  musicaUrl         String?   @map("musica_url")
  musicaFile        String?   @map("musica_file")
  bannerUrl         String?   @map("banner_url")
  galeria           String[]  @default([])
  videos            String[]  @default([])
  slugPublico       String    @unique @map("slug_publico")
  ativo             Boolean   @default(true)
  views             Int       @default(0)
  createdAt         DateTime  @default(now()) @map("created_at")
  updatedAt         DateTime  @updatedAt @map("updated_at")

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("couple_pages")
}

model PlanoAssinatura {
  id              String    @id @default(cuid())
  nome            String
  preco           Decimal   @db.Decimal(10, 2)
  descricao       String?
  duracaoMeses    Int       @default(1) @map("duracao_meses")
  maxPaginas      Int       @default(1) @map("max_paginas")
  stripeProductId String?   @map("stripe_product_id")
  stripePriceId   String?   @map("stripe_price_id")
  ativo           Boolean   @default(true)
  createdAt       DateTime  @default(now()) @map("created_at")
  updatedAt       DateTime  @updatedAt @map("updated_at")

  @@map("planos_assinatura")
}
