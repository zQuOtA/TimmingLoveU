generator client {
    provider = "prisma-client-js"
    binaryTargets = ["native", "linux-musl-arm64-openssl-3.0.x"]
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

// NextAuth models
model Account {
  id                String  @id @default(cuid())
  userId            String  @map("user_id")
  type              String
  provider          String
  providerAccountId String  @map("provider_account_id")
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model User {
  id                  String    @id @default(cuid())
  name                String?
  email               String    @unique
  emailVerified       DateTime? @map("email_verified")
  image               String?
  password            String?
  firstName           String?   @map("first_name")
  lastName            String?   @map("last_name")
  planoAtivo          Boolean   @default(false) @map("plano_ativo")
  dataExpiracaoPlano  DateTime? @map("data_expiracao_plano")
  isAdmin             Boolean   @default(false) @map("is_admin")
  createdAt           DateTime  @default(now()) @map("created_at")
  updatedAt           DateTime  @updatedAt @map("updated_at")

  accounts      Account[]
  sessions      Session[]
  couplePages   CouplePage[]
  media         Media[]
  subscriptions UserSubscription[]

  @@map("users")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verificationtokens")
}

// Timming LoveU specific models
model CouplePage {
  id                String    @id @default(cuid())
  userId            String    @map("user_id")
  nomeCasal         String    @map("nome_casal")
  mensagem          String?
  dataInicioRelacao DateTime  @map("data_inicio_relacao")
  musicaUrl         String?   @map("musica_url")
  musicaFile        String?   @map("musica_file")
  bannerUrl         String?   @map("banner_url")
  galeria           String[]  @default([])
  videos            String[]  @default([])
  slugPublico       String    @unique @map("slug_publico")
  ativo             Boolean   @default(true)
  views             Int       @default(0)
  createdAt         DateTime  @default(now()) @map("created_at")
  updatedAt         DateTime  @updatedAt @map("updated_at")

  user  User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  media Media[]

  @@map("couple_pages")
}

model PlanoAssinatura {
  id                   String             @id @default(cuid())
  nome                 String
  preco                Decimal            @db.Decimal(10, 2)
  descricao            String?
  duracaoMeses         Int                @default(1) @map("duracao_meses")
  maxPaginas           Int                @default(1) @map("max_paginas")
  stripeProductId      String?            @map("stripe_product_id")
  stripePriceId        String?            @map("stripe_price_id")
  mercadoPagoProductId String?            @map("mercadopago_product_id")
  mercadoPagoPriceId   String?            @map("mercadopago_price_id")
  ativo                Boolean            @default(true)
  createdAt            DateTime           @default(now()) @map("created_at")
  updatedAt            DateTime           @updatedAt @map("updated_at")

  subscriptions UserSubscription[]

  @@map("planos_assinatura")
}

model UserSubscription {
  id                  String    @id @default(cuid())
  userId              String    @map("user_id")
  planoId             String    @map("plano_id")
  status              String    @default("trial") // trial, active, past_due, canceled, incomplete, incomplete_expired
  provider            String    // stripe or mercadopago
  subscriptionId      String?   @unique @map("subscription_id") // Provider's subscription ID
  customerId          String?   @map("customer_id") // Provider's customer ID
  trialStartsAt       DateTime? @map("trial_starts_at")
  trialEndsAt         DateTime? @map("trial_ends_at")
  currentPeriodStart  DateTime? @map("current_period_start")
  currentPeriodEnd    DateTime? @map("current_period_end")
  canceledAt          DateTime? @map("canceled_at")
  cancelAtPeriodEnd   Boolean   @default(false) @map("cancel_at_period_end")
  createdAt           DateTime  @default(now()) @map("created_at")
  updatedAt           DateTime  @updatedAt @map("updated_at")

  user         User             @relation(fields: [userId], references: [id], onDelete: Cascade)
  plano        PlanoAssinatura  @relation(fields: [planoId], references: [id])
  transactions Transaction[]

  @@index([userId])
  @@index([planoId])
  @@index([status])
  @@map("user_subscriptions")
}

model Transaction {
  id               String            @id @default(cuid())
  subscriptionId   String            @map("subscription_id")
  provider         String            // stripe or mercadopago
  providerTxnId    String            @unique @map("provider_txn_id") // Provider's transaction/payment ID
  amount           Decimal           @db.Decimal(10, 2)
  currency         String            @default("BRL")
  status           String            // pending, completed, failed, refunded
  paymentMethod    String?           @map("payment_method")
  metadata         Json?             // Store additional provider-specific data
  createdAt        DateTime          @default(now()) @map("created_at")
  updatedAt        DateTime          @updatedAt @map("updated_at")

  subscription UserSubscription @relation(fields: [subscriptionId], references: [id], onDelete: Cascade)

  @@index([subscriptionId])
  @@index([providerTxnId])
  @@index([status])
  @@map("transactions")
}

// Media model for storing couple's photos and videos
model Media {
  id            String      @id @default(cuid())
  couplePageId  String      @map("couple_page_id")
  userId        String      @map("user_id")
  tipo          String      // 'image' or 'video'
  url           String      // Path or URL to the file
  fileName      String      @map("file_name")
  fileSize      Int         @map("file_size") // Size in bytes
  mimeType      String      @map("mime_type")
  titulo        String?
  descricao     String?
  dataEvento    DateTime?   @map("data_evento") // Date the photo/video was taken
  ordem         Int         @default(0) // Order for displaying in gallery
  ativo         Boolean     @default(true)
  createdAt     DateTime    @default(now()) @map("created_at")
  updatedAt     DateTime    @updatedAt @map("updated_at")

  couplePage CouplePage @relation(fields: [couplePageId], references: [id], onDelete: Cascade)
  user       User       @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([couplePageId])
  @@index([userId])
  @@map("media")
}
